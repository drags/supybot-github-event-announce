TODO:
x- Deal in OAUTH TOKENS only, rather than user messaging login, message user curl command for generating a token
x- listsubs output when 0 subs configured
x- listsubs outputs header for each sub
x- check if we already have a token for as_user and re-use
x- added subs where authorization already present must complete auth flow (symptom: not showing up in listsubs)
x- "In order to access the event stream" of?
x- "Unknown subscription type" add possible options
x- whine if target for 'addsub <user> repo <target>' doesn't have /
x- logging.debug all prints
- persistent storage
    - known subs
    - auths?
- delsub
- listauths
- delauth
- better help output


Config:
update interval


#--Etag polling
saving orgs/tokens to persistent storage
MINIM-FUCKING-AL
pylint commit hook


Events worth capturing:
http://developer.github.com/v3/activity/events/types/
IssuesEvent:
MemberEvent: (hooray, %s joined the team!)
PulLRequestEvent:
PullRequestReviewCommentEvent:
PushEvent:
WatchEvent:


To start:
CreateEvent
    actor
        login
    payload
        master_branch
        ref (new branch name)
        ref_type (repository, branch, tag)
    repo
        name

    if ref == 'repository':
        "{actor:login} created new repo {repo:name}"
    else:
        "{actor:login} created new {payload:ref_type} '{payload:ref}' on {repo:name}"

PullRequestEvent
    actor
        login
    payload
        pull_request
            action
            number
            title
            _links
                html
            head
                ref
            base
                ref
    repo
        name

    "{actor:login} {payload:action} pull request {repo:name}/{payload:number} '{payload:title}' [{payload:_links:html}]"

IssueCommentEvent
    actor
        login
    payload
        comment
            body
            url
            user
                login

    "{actor:login} commented on {payload:pull_request:html_url} {payload:comment[0:50]}... [

PushEvent
    actor
        login
    payload
        size
        commits
            message
            sha
        ref (branch)
    repo
        name

        "{actor:login} pushed {payload:size} commits to {repo:name}"

